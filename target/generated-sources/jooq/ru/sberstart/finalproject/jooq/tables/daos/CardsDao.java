/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables.daos;


import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.sberstart.finalproject.jooq.tables.Cards;
import ru.sberstart.finalproject.jooq.tables.records.CardsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardsDao extends DAOImpl<CardsRecord, ru.sberstart.finalproject.jooq.tables.pojos.Cards, UUID> {

    /**
     * Create a new CardsDao without any configuration
     */
    public CardsDao() {
        super(Cards.CARDS, ru.sberstart.finalproject.jooq.tables.pojos.Cards.class);
    }

    /**
     * Create a new CardsDao with an attached configuration
     */
    public CardsDao(Configuration configuration) {
        super(Cards.CARDS, ru.sberstart.finalproject.jooq.tables.pojos.Cards.class, configuration);
    }

    @Override
    public UUID getId(ru.sberstart.finalproject.jooq.tables.pojos.Cards object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Cards.CARDS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchById(UUID... values) {
        return fetch(Cards.CARDS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Cards fetchOneById(UUID value) {
        return fetchOne(Cards.CARDS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchOptionalById(UUID value) {
        return fetchOptional(Cards.CARDS.ID, value);
    }

    /**
     * Fetch records that have <code>BANKACCOUNT_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchRangeOfBankaccountId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Cards.CARDS.BANKACCOUNT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BANKACCOUNT_ID IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchByBankaccountId(UUID... values) {
        return fetch(Cards.CARDS.BANKACCOUNT_ID, values);
    }

    /**
     * Fetch records that have <code>NUMBER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchRangeOfNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NUMBER IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchByNumber(String... values) {
        return fetch(Cards.CARDS.NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>NUMBER = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Cards fetchOneByNumber(String value) {
        return fetchOne(Cards.CARDS.NUMBER, value);
    }

    /**
     * Fetch a unique record that has <code>NUMBER = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchOptionalByNumber(String value) {
        return fetchOptional(Cards.CARDS.NUMBER, value);
    }

    /**
     * Fetch records that have <code>STATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Cards.CARDS.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Cards> fetchByState(String... values) {
        return fetch(Cards.CARDS.STATE, values);
    }
}

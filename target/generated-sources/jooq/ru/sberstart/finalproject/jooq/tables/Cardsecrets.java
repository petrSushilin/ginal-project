/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.sberstart.finalproject.jooq.Keys;
import ru.sberstart.finalproject.jooq.Public;
import ru.sberstart.finalproject.jooq.tables.records.CardsecretsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cardsecrets extends TableImpl<CardsecretsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CARDSECRETS</code>
     */
    public static final Cardsecrets CARDSECRETS = new Cardsecrets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsecretsRecord> getRecordType() {
        return CardsecretsRecord.class;
    }

    /**
     * The column <code>PUBLIC.CARDSECRETS.CARD_NUMBER</code>.
     */
    public final TableField<CardsecretsRecord, String> CARD_NUMBER = createField(DSL.name("CARD_NUMBER"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDSECRETS.HOLDER_NAME</code>.
     */
    public final TableField<CardsecretsRecord, String> HOLDER_NAME = createField(DSL.name("HOLDER_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDSECRETS.HOLDER_SURNAME</code>.
     */
    public final TableField<CardsecretsRecord, String> HOLDER_SURNAME = createField(DSL.name("HOLDER_SURNAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDSECRETS.VALIDATE_PERIOD</code>.
     */
    public final TableField<CardsecretsRecord, String> VALIDATE_PERIOD = createField(DSL.name("VALIDATE_PERIOD"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDSECRETS.CVV</code>.
     */
    public final TableField<CardsecretsRecord, String> CVV = createField(DSL.name("CVV"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDSECRETS.SECRET_CODE</code>.
     */
    public final TableField<CardsecretsRecord, String> SECRET_CODE = createField(DSL.name("SECRET_CODE"), SQLDataType.VARCHAR(270).nullable(false), this, "");

    private Cardsecrets(Name alias, Table<CardsecretsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cardsecrets(Name alias, Table<CardsecretsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSECRETS</code> table reference
     */
    public Cardsecrets(String alias) {
        this(DSL.name(alias), CARDSECRETS);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDSECRETS</code> table reference
     */
    public Cardsecrets(Name alias) {
        this(alias, CARDSECRETS);
    }

    /**
     * Create a <code>PUBLIC.CARDSECRETS</code> table reference
     */
    public Cardsecrets() {
        this(DSL.name("CARDSECRETS"), null);
    }

    public <O extends Record> Cardsecrets(Table<O> child, ForeignKey<O, CardsecretsRecord> key) {
        super(child, key, CARDSECRETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CardsecretsRecord> getPrimaryKey() {
        return Keys.PK_CARDSECRETS;
    }

    @Override
    public List<UniqueKey<CardsecretsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_B);
    }

    @Override
    public Cardsecrets as(String alias) {
        return new Cardsecrets(DSL.name(alias), this);
    }

    @Override
    public Cardsecrets as(Name alias) {
        return new Cardsecrets(alias, this);
    }

    @Override
    public Cardsecrets as(Table<?> alias) {
        return new Cardsecrets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsecrets rename(String name) {
        return new Cardsecrets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsecrets rename(Name name) {
        return new Cardsecrets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cardsecrets rename(Table<?> name) {
        return new Cardsecrets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.sberstart.finalproject.jooq.tables.Bankaccounts;
import ru.sberstart.finalproject.jooq.tables.records.BankaccountsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankaccountsDao extends DAOImpl<BankaccountsRecord, ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts, UUID> {

    /**
     * Create a new BankaccountsDao without any configuration
     */
    public BankaccountsDao() {
        super(Bankaccounts.BANKACCOUNTS, ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts.class);
    }

    /**
     * Create a new BankaccountsDao with an attached configuration
     */
    public BankaccountsDao(Configuration configuration) {
        super(Bankaccounts.BANKACCOUNTS, ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts.class, configuration);
    }

    @Override
    public UUID getId(ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchById(UUID... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts fetchOneById(UUID value) {
        return fetchOne(Bankaccounts.BANKACCOUNTS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchOptionalById(UUID value) {
        return fetchOptional(Bankaccounts.BANKACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>BANK_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfBankId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.BANK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BANK_ID IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByBankId(UUID... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.BANK_ID, values);
    }

    /**
     * Fetch records that have <code>USER_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_ID IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByUserId(UUID... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.USER_ID, values);
    }

    /**
     * Fetch records that have <code>REGISTRY_DATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfRegistryDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.REGISTRY_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REGISTRY_DATE IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByRegistryDate(LocalDate... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.REGISTRY_DATE, values);
    }

    /**
     * Fetch records that have <code>NUMBER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NUMBER IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByNumber(String... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>NUMBER = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts fetchOneByNumber(String value) {
        return fetchOne(Bankaccounts.BANKACCOUNTS.NUMBER, value);
    }

    /**
     * Fetch a unique record that has <code>NUMBER = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchOptionalByNumber(String value) {
        return fetchOptional(Bankaccounts.BANKACCOUNTS.NUMBER, value);
    }

    /**
     * Fetch records that have <code>BALANCE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfBalance(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.BALANCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BALANCE IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByBalance(BigDecimal... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.BALANCE, values);
    }

    /**
     * Fetch records that have <code>STATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(Bankaccounts.BANKACCOUNTS.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Bankaccounts> fetchByState(String... values) {
        return fetch(Bankaccounts.BANKACCOUNTS.STATE, values);
    }
}

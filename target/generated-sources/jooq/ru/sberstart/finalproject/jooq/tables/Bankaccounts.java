/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.sberstart.finalproject.jooq.Indexes;
import ru.sberstart.finalproject.jooq.Keys;
import ru.sberstart.finalproject.jooq.Public;
import ru.sberstart.finalproject.jooq.tables.records.BankaccountsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bankaccounts extends TableImpl<BankaccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.BankAccounts</code>
     */
    public static final Bankaccounts BANKACCOUNTS = new Bankaccounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankaccountsRecord> getRecordType() {
        return BankaccountsRecord.class;
    }

    /**
     * The column <code>public.BankAccounts.id</code>.
     */
    public final TableField<BankaccountsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.BankAccounts.bank_id</code>.
     */
    public final TableField<BankaccountsRecord, UUID> BANK_ID = createField(DSL.name("bank_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.BankAccounts.user_id</code>.
     */
    public final TableField<BankaccountsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.BankAccounts.registry_date</code>.
     */
    public final TableField<BankaccountsRecord, LocalDate> REGISTRY_DATE = createField(DSL.name("registry_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.BankAccounts.number</code>.
     */
    public final TableField<BankaccountsRecord, String> NUMBER = createField(DSL.name("number"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.BankAccounts.balance</code>.
     */
    public final TableField<BankaccountsRecord, BigDecimal> BALANCE = createField(DSL.name("balance"), SQLDataType.NUMERIC(20, 2).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.BankAccounts.state</code>.
     */
    public final TableField<BankaccountsRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private Bankaccounts(Name alias, Table<BankaccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bankaccounts(Name alias, Table<BankaccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.BankAccounts</code> table reference
     */
    public Bankaccounts(String alias) {
        this(DSL.name(alias), BANKACCOUNTS);
    }

    /**
     * Create an aliased <code>public.BankAccounts</code> table reference
     */
    public Bankaccounts(Name alias) {
        this(alias, BANKACCOUNTS);
    }

    /**
     * Create a <code>public.BankAccounts</code> table reference
     */
    public Bankaccounts() {
        this(DSL.name("BankAccounts"), null);
    }

    public <O extends Record> Bankaccounts(Table<O> child, ForeignKey<O, BankaccountsRecord> key) {
        super(child, key, BANKACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BANKACCOUNTS_BANK_ID, Indexes.IDX_BANKACCOUNTS_USER_ID);
    }

    @Override
    public UniqueKey<BankaccountsRecord> getPrimaryKey() {
        return Keys.BANKACCOUNTS_PKEY;
    }

    @Override
    public List<UniqueKey<BankaccountsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.BANKACCOUNTS_NUMBER_KEY);
    }

    @Override
    public List<ForeignKey<BankaccountsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANKACCOUNTS__FK_BANKACCOUNTS_BANKS, Keys.BANKACCOUNTS__FK_BANKACCOUNTS_USERS);
    }

    private transient Banks _banks;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.Banks</code> table.
     */
    public Banks banks() {
        if (_banks == null)
            _banks = new Banks(this, Keys.BANKACCOUNTS__FK_BANKACCOUNTS_BANKS);

        return _banks;
    }

    /**
     * Get the implicit join path to the <code>public.Users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.BANKACCOUNTS__FK_BANKACCOUNTS_USERS);

        return _users;
    }

    @Override
    public Bankaccounts as(String alias) {
        return new Bankaccounts(DSL.name(alias), this);
    }

    @Override
    public Bankaccounts as(Name alias) {
        return new Bankaccounts(alias, this);
    }

    @Override
    public Bankaccounts as(Table<?> alias) {
        return new Bankaccounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccounts rename(String name) {
        return new Bankaccounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccounts rename(Name name) {
        return new Bankaccounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccounts rename(Table<?> name) {
        return new Bankaccounts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, LocalDate, String, BigDecimal, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super UUID, ? super LocalDate, ? super String, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super UUID, ? super LocalDate, ? super String, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

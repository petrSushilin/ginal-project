/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables.daos;


import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import ru.sberstart.finalproject.jooq.tables.Banks;
import ru.sberstart.finalproject.jooq.tables.records.BanksRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BanksDao extends DAOImpl<BanksRecord, ru.sberstart.finalproject.jooq.tables.pojos.Banks, UUID> {

    /**
     * Create a new BanksDao without any configuration
     */
    public BanksDao() {
        super(Banks.BANKS, ru.sberstart.finalproject.jooq.tables.pojos.Banks.class);
    }

    /**
     * Create a new BanksDao with an attached configuration
     */
    public BanksDao(Configuration configuration) {
        super(Banks.BANKS, ru.sberstart.finalproject.jooq.tables.pojos.Banks.class, configuration);
    }

    @Override
    public UUID getId(ru.sberstart.finalproject.jooq.tables.pojos.Banks object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Banks.BANKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchById(UUID... values) {
        return fetch(Banks.BANKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Banks fetchOneById(UUID value) {
        return fetchOne(Banks.BANKS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchOptionalById(UUID value) {
        return fetchOptional(Banks.BANKS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Banks.BANKS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchByName(String... values) {
        return fetch(Banks.BANKS.NAME, values);
    }

    /**
     * Fetch records that have <code>identity_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchRangeOfIdentityNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Banks.BANKS.IDENTITY_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>identity_number IN (values)</code>
     */
    public List<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchByIdentityNumber(String... values) {
        return fetch(Banks.BANKS.IDENTITY_NUMBER, values);
    }

    /**
     * Fetch a unique record that has <code>identity_number = value</code>
     */
    public ru.sberstart.finalproject.jooq.tables.pojos.Banks fetchOneByIdentityNumber(String value) {
        return fetchOne(Banks.BANKS.IDENTITY_NUMBER, value);
    }

    /**
     * Fetch a unique record that has <code>identity_number = value</code>
     */
    public Optional<ru.sberstart.finalproject.jooq.tables.pojos.Banks> fetchOptionalByIdentityNumber(String value) {
        return fetchOptional(Banks.BANKS.IDENTITY_NUMBER, value);
    }
}

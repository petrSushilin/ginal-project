/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.sberstart.finalproject.jooq.Keys;
import ru.sberstart.finalproject.jooq.Public;
import ru.sberstart.finalproject.jooq.tables.records.UserrolesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userroles extends TableImpl<UserrolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.USERROLES</code>
     */
    public static final Userroles USERROLES = new Userroles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserrolesRecord> getRecordType() {
        return UserrolesRecord.class;
    }

    /**
     * The column <code>PUBLIC.USERROLES.USER_ID</code>.
     */
    public final TableField<UserrolesRecord, UUID> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USERROLES.ROLE_ID</code>.
     */
    public final TableField<UserrolesRecord, UUID> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.UUID.nullable(false), this, "");

    private Userroles(Name alias, Table<UserrolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userroles(Name alias, Table<UserrolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.USERROLES</code> table reference
     */
    public Userroles(String alias) {
        this(DSL.name(alias), USERROLES);
    }

    /**
     * Create an aliased <code>PUBLIC.USERROLES</code> table reference
     */
    public Userroles(Name alias) {
        this(alias, USERROLES);
    }

    /**
     * Create a <code>PUBLIC.USERROLES</code> table reference
     */
    public Userroles() {
        this(DSL.name("USERROLES"), null);
    }

    public <O extends Record> Userroles(Table<O> child, ForeignKey<O, UserrolesRecord> key) {
        super(child, key, USERROLES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserrolesRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_BB;
    }

    @Override
    public List<ForeignKey<UserrolesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USER_ROLES_USERS, Keys.FK_USER_ROLES_ROLES);
    }

    private transient Users _users;
    private transient Roles _roles;

    /**
     * Get the implicit join path to the <code>PUBLIC.USERS</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK_USER_ROLES_USERS);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.ROLES</code> table.
     */
    public Roles roles() {
        if (_roles == null)
            _roles = new Roles(this, Keys.FK_USER_ROLES_ROLES);

        return _roles;
    }

    @Override
    public Userroles as(String alias) {
        return new Userroles(DSL.name(alias), this);
    }

    @Override
    public Userroles as(Name alias) {
        return new Userroles(alias, this);
    }

    @Override
    public Userroles as(Table<?> alias) {
        return new Userroles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userroles rename(String name) {
        return new Userroles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userroles rename(Name name) {
        return new Userroles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userroles rename(Table<?> name) {
        return new Userroles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package ru.sberstart.finalproject.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.sberstart.finalproject.jooq.Indexes;
import ru.sberstart.finalproject.jooq.Keys;
import ru.sberstart.finalproject.jooq.Public;
import ru.sberstart.finalproject.jooq.tables.records.CardsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cards extends TableImpl<CardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CARDS</code>
     */
    public static final Cards CARDS = new Cards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardsRecord> getRecordType() {
        return CardsRecord.class;
    }

    /**
     * The column <code>PUBLIC.CARDS.ID</code>.
     */
    public final TableField<CardsRecord, UUID> ID = createField(DSL.name("ID"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("RANDOM_UUID()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>PUBLIC.CARDS.BANKACCOUNT_ID</code>.
     */
    public final TableField<CardsRecord, UUID> BANKACCOUNT_ID = createField(DSL.name("BANKACCOUNT_ID"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDS.NUMBER</code>.
     */
    public final TableField<CardsRecord, String> NUMBER = createField(DSL.name("NUMBER"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARDS.STATE</code>.
     */
    public final TableField<CardsRecord, String> STATE = createField(DSL.name("STATE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    private Cards(Name alias, Table<CardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cards(Name alias, Table<CardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.CARDS</code> table reference
     */
    public Cards(String alias) {
        this(DSL.name(alias), CARDS);
    }

    /**
     * Create an aliased <code>PUBLIC.CARDS</code> table reference
     */
    public Cards(Name alias) {
        this(alias, CARDS);
    }

    /**
     * Create a <code>PUBLIC.CARDS</code> table reference
     */
    public Cards() {
        this(DSL.name("CARDS"), null);
    }

    public <O extends Record> Cards(Table<O> child, ForeignKey<O, CardsRecord> key) {
        super(child, key, CARDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CARD_NUMBER, Indexes.IDX_CARDS_BANKACCOUNT_ID);
    }

    @Override
    public UniqueKey<CardsRecord> getPrimaryKey() {
        return Keys.PK_CARDS;
    }

    @Override
    public List<UniqueKey<CardsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_3C);
    }

    @Override
    public List<ForeignKey<CardsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_CARDS_BANKACCOUNTS, Keys.FK_CARDSECRETS_CARDS_CARD_NUMBER);
    }

    private transient Bankaccounts _bankaccounts;
    private transient Cardsecrets _cardsecrets;

    /**
     * Get the implicit join path to the <code>PUBLIC.BANKACCOUNTS</code> table.
     */
    public Bankaccounts bankaccounts() {
        if (_bankaccounts == null)
            _bankaccounts = new Bankaccounts(this, Keys.FK_CARDS_BANKACCOUNTS);

        return _bankaccounts;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.CARDSECRETS</code> table.
     */
    public Cardsecrets cardsecrets() {
        if (_cardsecrets == null)
            _cardsecrets = new Cardsecrets(this, Keys.FK_CARDSECRETS_CARDS_CARD_NUMBER);

        return _cardsecrets;
    }

    @Override
    public Cards as(String alias) {
        return new Cards(DSL.name(alias), this);
    }

    @Override
    public Cards as(Name alias) {
        return new Cards(alias, this);
    }

    @Override
    public Cards as(Table<?> alias) {
        return new Cards(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(String name) {
        return new Cards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Name name) {
        return new Cards(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cards rename(Table<?> name) {
        return new Cards(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
